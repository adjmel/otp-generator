#!/usr/bin/env python

import hmac
import hashlib # Pour utiliser la fonction de hachage SHA-1.
import struct # Pour la manipulation des données binaires.
import time
import os
from cryptography.fernet import Fernet
import sys
from sys import argv

KEY_FILE = "ft_otp.key"

def save_encrypted_key(hex_key):
    if not os.path.exists(hex_key):
        hex_key = argv[2]
        if len(hex_key) != 64 or not all(c in '0123456789abcdefABCDEF' for c in hex_key):
            print("error: key must be 64 hexadecimal characters.")
            exit(1)
    else:
        with open(hex_key, 'r') as f:
            hex_key = f.read().strip()
            if len(hex_key) != 64 or not all(c in '0123456789abcdefABCDEF' for c in hex_key):
                print("error: key must be 64 hexadecimal characters.")
                exit(1)

    encryption_key = Fernet.generate_key()
    cipher_suite = Fernet(encryption_key)
    encrypted_key = cipher_suite.encrypt(hex_key.encode())
    with open(KEY_FILE, 'wb') as f:
        f.write(encryption_key + b"\n" + encrypted_key)
    print("Key was successfully saved in ft_otp.key.")


def load_encrypted_key(key_or_file):
    if os.path.exists(key_or_file):
        with open(key_or_file, 'rb') as f:
            encryption_key = f.readline().strip()
            encrypted_key = f.readline().strip()

        cipher_suite = Fernet(encryption_key)
        hex_key = cipher_suite.decrypt(encrypted_key).decode()
        return hex_key
    else:
        if len(key_or_file) < 64 or not all(c in '0123456789abcdefABCDEF' for c in key_or_file):
            print("error: key must be 64 hexadecimal characters.")
            exit(1)
        return key_or_file

def generate_otp(key, counter, digits=6):
    key_bytes = bytes.fromhex(key)
    counter_bytes = struct.pack('>Q', counter)
    hmac_hash = hmac.new(key_bytes, counter_bytes, hashlib.sha1).digest() #digest() retourne le résultat du calcul sous forme de bytes
    starting_point = hmac_hash[-1] & 0xf
    code = struct.unpack(">I", hmac_hash[starting_point:starting_point + 4])[0] & 0x7fffffff
    return str(code)[-digits:].zfill(digits)

def main():
    if len(argv) < 2:
        print("Usage:\n -g <hexadecimal_key> to generate and store the key\n -k to generate an OTP code")
        exit(1)

    if argv[1] == "-g" and len(argv) == 3:
        save_encrypted_key(argv[2]) #fichier chiffre
    elif argv[1] == "-k" and len(argv) == 3:
        hex_key = load_encrypted_key(argv[2]) #clef chiffre et de dechiffrement
        counter = int(time.time() // 30)
        otp = generate_otp(hex_key, counter)
        print(f"{otp}")
    else:
        print("Usage:\n -g <hexadecimal_key> to generate and store the key\n -k to generate an OTP code")

if __name__ == "__main__":
	main()
	
